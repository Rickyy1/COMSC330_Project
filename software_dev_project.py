# -*- coding: utf-8 -*-
"""Software_Dev_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1doFYCCwBMD8djoIXCNFa01sZrXMGNFQy
"""



"""# Overview / Notes

# New Section
"""

#Import Libraries
import os
import warnings as warn
import pandas as pd
import numpy as np

warn.filterwarnings("ignore")
#one of the pandas functions makes the output illegible with how many deprecation warnings it throws.

#Utility Functions & Dictionaries
letter2GPA = {
  'A+': 4.0, 'A': 4.0, 'A-': 3.7,
  'B+': 3.3, 'B': 3.0, 'B-': 2.7,
  'C+': 2.3, 'C': 2.0, 'C-': 1.7,
  'D+': 1.3, 'D': 1.0,
  'E': 0, 'F': 0
}

groups = []
#read in the .RUN file
with open("TESTRUN.RUN", 'r') as RUN:
  lines = RUN.read().splitlines()
  #loop through each line in the RUN file
  for line in lines:
    #split the content of the line into the file name and its extension
    #lineContent[0] is file name, while lineContent[1] is file extension
    
    lineContent = os.path.splitext(line)

    if (lineContent[1]):
        groups.append(line)
        #print("Group found: " + line)
        #print("ext: " + lineContent[1])
    else:
      print("Semester: " + line)
  RUN.close()

"""# New Section"""

from google.colab import drive
drive.mount('/content/drive')

# Define count variables to count each grade
countA=0
countAM=0
countBP=0
countB=0
countBM=0
countCP=0
countC=0
countCM=0
countDP=0
countD=0
countF=0
#loop through all of our group files
for i in groups:
  #Each individual group gets a dataframe where grades are stores along with the section
  #Each group gets an additional dataframe to calculate and store each of its sections' averages.
  groupDataFrame = pd.DataFrame(columns = ['Section', 'GPA'])
  sectionAverages = None #this will be defined later

  sections = []
  
  #read in the group file
  with open(i, 'r') as group:
    lines = group.read().splitlines()
    for line in lines:
      lineContent = os.path.splitext(line)
      if (lineContent[1]):
        sections.append(line)
        #print("Section found: " + line)
      else:
        print("Class: " + line)
    group.close()

  print()
  for i2 in sections:
    with open(i2, 'r') as section:
      lines = section.read().splitlines()
      currentSection = None
      for line in lines:
        line = line.replace('"', '')
        data = line.split(",")
        #get the element at index 3 of the data, which is likely the grade assuming it's formatted correctly.
        if (len(data) < 4):
          currentSection = data[0] #.split(' ')[0]
          #print("Current Section: " + currentSection)
        elif (data[3] not in ['I', 'W', 'P', 'NP']):
          groupDataFrame = groupDataFrame.append({'GPA': letter2GPA[data[3]], 'Section': currentSection}, ignore_index = True)
          if letter2GPA[data[3]] == 4.0:
            countA= countA + 1
          elif letter2GPA[data[3]] == 3.7:
            countAM=countAM +1
          elif letter2GPA[data[3]] == 3.3:
            countBP= countBP + 1
          elif letter2GPA[data[3]] == 3.0:
            countB= countB + 1
          elif letter2GPA[data[3]] == 2.7:
            countBM= countBM + 1
          elif letter2GPA[data[3]] == 2.3:
            countCP= countCP + 1
          elif letter2GPA[data[3]] == 2.0:
            countC= countC + 1
          elif letter2GPA[data[3]] == 1.7:
            countCM= countCM + 1
          elif letter2GPA[data[3]] == 1.3:
            countDP= countDP + 1
          elif letter2GPA[data[3]] == 1.0:
            countD= countD + 1
          elif letter2GPA[data[3]] == 0:
            countF= countF + 1
        #print(data)
  #at this point we've collected all GPA values into the dataframe and have them labelled by section
  #now we can use the pandas library to come up with the averages for the sections.
  sectionAverages = groupDataFrame.groupby('Section')['GPA'].mean().reset_index(name = 'Average GPA')
  array = sectionAverages['Average GPA'].values

  groupAverage = sectionAverages.loc[:, 'Average GPA'].mean()
  z_test=[]
  for i in array:
    b=array.mean()
    c=array.std()
    a = i
    z = ((a-b)/c)
    z_test.append(z)
  sectionAverages['z_test']=z_test
  print(sectionAverages)
  print("Group Average ",groupAverage)
#gradeCount = pd.DataFrame({'Grade':['A', 'A-', 'B+','B','B-','C+','C','C-','D+','D','F'], 'Number Of Students':[countA,countAM,countBP,countB,countBM,countCP,countC,countCM,countDP,countD,countF]})
#GradeGraph = gradeCount.plot.bar(x='Grade', y='Number Of Students', rot=0)


  #at this point in the code, we have the overall group average, and the averages of the sections.
  #now we can loop through the dataframe to plug these values into the z-test.
  #from there we just need to print out our conclusions from the z-test and our averages in a legible way.

input('Press ENTER to exit')



